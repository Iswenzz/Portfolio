{"ast":null,"code":"// This optional code is used to register a service worker.\n// register() is not called by default.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\nvar isLocalhost=Boolean(window.location.hostname===\"localhost\"||// [::1] is the IPv6 localhost address.\nwindow.location.hostname===\"[::1]\"||// 127.0.0.0/8 are considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));export function register(config){if(process.env.NODE_ENV===\"production\"&&\"serviceWorker\"in navigator){// The URL constructor is available in all browsers that support SW.\nvar publicUrl=new URL(process.env.PUBLIC_URL,window.location.href);if(publicUrl.origin!==window.location.origin){// Our service worker won't work if PUBLIC_URL is on a different origin\n// from what our page is served on. This might happen if a CDN is used to\n// serve assets; see https://github.com/facebook/create-react-app/issues/2374\nreturn;}window.addEventListener(\"load\",function(){var swUrl=\"\".concat(process.env.PUBLIC_URL,\"/service-worker.js\");if(isLocalhost){// This is running on localhost. Let's check if a service worker still exists or not.\ncheckValidServiceWorker(swUrl,config);// Add some additional logging to localhost, pointing developers to the\n// service worker/PWA documentation.\nnavigator.serviceWorker.ready.then(function(){console.log(\"This web app is being served cache-first by a service \"+\"worker. To learn more, visit https://bit.ly/CRA-PWA\");});}else{// Is not localhost. Just register service worker\nregisterValidSW(swUrl,config);}});}}function registerValidSW(swUrl,config){navigator.serviceWorker.register(swUrl).then(function(registration){registration.onupdatefound=function(){var installingWorker=registration.installing;if(installingWorker==null)return;installingWorker.onstatechange=function(){if(installingWorker.state===\"installed\"){if(navigator.serviceWorker.controller){// At this point, the updated precached content has been fetched,\n// but the previous service worker will still serve the older\n// content until all client tabs are closed.\nconsole.log(\"New content is available and will be used when all \"+\"tabs for this page are closed. See https://bit.ly/CRA-PWA.\");// Execute callback\nif(config&&config.onUpdate)config.onUpdate(registration);}else{// At this point, everything has been precached.\n// It's the perfect time to display a\n// \"Content is cached for offline use.\" message.\nconsole.log(\"Content is cached for offline use.\");// Execute callback\nif(config&&config.onSuccess)config.onSuccess(registration);}}};};}).catch(function(error){console.error(\"Error during service worker registration:\",error);});}function checkValidServiceWorker(swUrl,config){// Check if the service worker can be found. If it can't reload the page.\nfetch(swUrl,{headers:{\"Service-Worker\":\"script\"}}).then(function(response){// Ensure service worker exists, and that we really are getting a JS file.\nvar contentType=response.headers.get(\"content-type\");if(response.status===404||contentType!=null&&contentType.indexOf(\"javascript\")===-1){// No service worker found. Probably a different app. Reload the page.\nnavigator.serviceWorker.ready.then(function(registration){registration.unregister().then(function(){window.location.reload();});});}else{// Service worker found. Proceed as normal.\nregisterValidSW(swUrl,config);}}).catch(function(){console.log(\"No internet connection found. App is running in offline mode.\");});}export function unregister(){if(\"serviceWorker\"in navigator){navigator.serviceWorker.ready.then(function(registration){registration.unregister();}).catch(function(error){console.error(error.message);});}}","map":{"version":3,"sources":["D:/Projects/PortfolioWebsite/src/serviceWorker.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","message"],"mappings":"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","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  \twindow.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n\twindow.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n    \t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) \r\n{\r\n\tif (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) \r\n\t{\r\n\t\t// The URL constructor is available in all browsers that support SW.\r\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n\t\tif (publicUrl.origin !== window.location.origin) \r\n\t\t{\r\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\r\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\r\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\twindow.addEventListener(\"load\", () => \r\n\t\t{\r\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n\t\t\tif (isLocalhost)\r\n\t\t\t{\r\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\r\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\r\n\r\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\r\n\t\t\t\t// service worker/PWA documentation.\r\n\t\t\t\tnavigator.serviceWorker.ready.then(() => \r\n\t\t\t\t{\r\n\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\"This web app is being served cache-first by a service \" +\r\n\t\t\t\t\t\t\"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n\t\t\t\t\t);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse \r\n\t\t\t{\r\n\t\t\t\t// Is not localhost. Just register service worker\r\n\t\t\t\tregisterValidSW(swUrl, config);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) \r\n{\r\n\tnavigator.serviceWorker\r\n\t\t.register(swUrl)\r\n\t\t.then(registration => \r\n\t{\r\n\t\tregistration.onupdatefound = () => \r\n\t\t{\r\n\t\t\tconst installingWorker = registration.installing;\r\n\t\t\tif (installingWorker == null) \r\n\t\t\t\treturn;\r\n\r\n\t\t\tinstallingWorker.onstatechange = () => \r\n\t\t\t{\r\n\t\t\t\tif (installingWorker.state === \"installed\") \r\n\t\t\t\t{\r\n\t\t\t\t\tif (navigator.serviceWorker.controller) \r\n\t\t\t\t\t{\r\n\t\t\t\t\t// At this point, the updated precached content has been fetched,\r\n\t\t\t\t\t// but the previous service worker will still serve the older\r\n\t\t\t\t\t// content until all client tabs are closed.\r\n\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\"New content is available and will be used when all \" +\r\n\t\t\t\t\t\t\"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t// Execute callback\r\n\t\t\t\t\tif (config && config.onUpdate)\r\n\t\t\t\t\t\tconfig.onUpdate(registration);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse \r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// At this point, everything has been precached.\r\n\t\t\t\t\t\t// It's the perfect time to display a\r\n\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\r\n\t\t\t\t\t\tconsole.log(\"Content is cached for offline use.\");\r\n\r\n\t\t\t\t\t\t// Execute callback\r\n\t\t\t\t\t\tif (config && config.onSuccess) \r\n\t\t\t\t\t\t\tconfig.onSuccess(registration);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t};\r\n\t}).catch(error => \r\n\t{\r\n\t\tconsole.error(\"Error during service worker registration:\", error);\r\n\t});\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) \r\n{\r\n\t// Check if the service worker can be found. If it can't reload the page.\r\n\tfetch(swUrl, {\r\n\t\theaders: { \"Service-Worker\": \"script\" },\r\n\t}).then(response => \r\n\t{\r\n\t\t// Ensure service worker exists, and that we really are getting a JS file.\r\n\t\tconst contentType = response.headers.get(\"content-type\");\r\n\t\tif (\r\n\t\t\tresponse.status === 404 ||\r\n\t\t\t(contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n\t\t)\r\n\t\t{\r\n\t\t\t// No service worker found. Probably a different app. Reload the page.\r\n\t\t\tnavigator.serviceWorker.ready.then(registration => \r\n\t\t\t{\r\n        \t\tregistration.unregister().then(() => \r\n\t\t\t\t{\r\n            \t\twindow.location.reload();\r\n          \t\t});\r\n        \t});\r\n      \t}\r\n\t\telse \r\n\t\t{\r\n\t\t\t\t// Service worker found. Proceed as normal.\r\n\t\t\t\tregisterValidSW(swUrl, config);\r\n\t\t}\r\n\t}).catch(() => \r\n\t{\r\n      console.log(\"No internet connection found. App is running in offline mode.\");\r\n    });\r\n}\r\n\r\nexport function unregister() \r\n{\r\n  \tif (\"serviceWorker\" in navigator) \r\n\t{\r\n\t\tnavigator.serviceWorker.ready\r\n\t\t\t.then(registration =>\r\n\t\t{\r\n\t\t\tregistration.unregister();\r\n\t\t}).catch(error => \r\n\t\t{\r\n\t\t\tconsole.error(error.message);\r\n\t\t});\r\n  \t}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}