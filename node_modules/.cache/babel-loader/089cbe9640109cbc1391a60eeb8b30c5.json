{"ast":null,"code":"// This optional code is used to register a service worker.\n// register() is not called by default.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\nconst isLocalhost = Boolean(window.location.hostname === \"localhost\" || // [::1] is the IPv6 localhost address.\nwindow.location.hostname === \"[::1]\" || // 127.0.0.0/8 are considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config); // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\"This web app is being served cache-first by a service \" + \"worker. To learn more, visit https://bit.ly/CRA-PWA\");\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n      if (installingWorker == null) return;\n\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === \"installed\") {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the updated precached content has been fetched,\n            // but the previous service worker will still serve the older\n            // content until all client tabs are closed.\n            console.log(\"New content is available and will be used when all \" + \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"); // Execute callback\n\n            if (config && config.onUpdate) config.onUpdate(registration);\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log(\"Content is cached for offline use.\"); // Execute callback\n\n            if (config && config.onSuccess) config.onSuccess(registration);\n          }\n        }\n      };\n    };\n  }).catch(error => {\n    console.error(\"Error during service worker registration:\", error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {\n      \"Service-Worker\": \"script\"\n    }\n  }).then(response => {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    const contentType = response.headers.get(\"content-type\");\n\n    if (response.status === 404 || contentType != null && contentType.indexOf(\"javascript\") === -1) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  }).catch(() => {\n    console.log(\"No internet connection found. App is running in offline mode.\");\n  });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    }).catch(error => {\n      console.error(error.message);\n    });\n  }\n}","map":{"version":3,"sources":["D:/Projects/PortfolioWebsite/src/serviceWorker.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","message"],"mappings":"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","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  \twindow.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n\twindow.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n    \t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) \n{\n\tif (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) \n\t{\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) \n\t{\n\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener(\"load\", () => \n\t{\n\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\tif (isLocalhost) \n\t{\n\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t// service worker/PWA documentation.\n\t\t\tnavigator.serviceWorker.ready.then(() => \n\t{\n\t\t\tconsole.log(\n\t\t\t\t\"This web app is being served cache-first by a service \" +\n\t\t\t\t\"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n\t\t\t);\n\t\t\t});\n\t\t}\n\telse \n\t{\n\t\t\t// Is not localhost. Just register service worker\n\t\t\tregisterValidSW(swUrl, config);\n\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) \n{\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => \n\t{\n\t\tregistration.onupdatefound = () => \n\t\t{\n\t\t\tconst installingWorker = registration.installing;\n\t\t\tif (installingWorker == null) return;\n\t\t\tinstallingWorker.onstatechange = () => \n\t\t\t{\n\t\t\t\tif (installingWorker.state === \"installed\") \n\t\t\t\t{\n\t\t\t\t\tif (navigator.serviceWorker.controller) \n\t\t\t\t\t{\n\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\"New content is available and will be used when all \" +\n\t\t\t\t\t\t\"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n\t\t\t\t\t);\n\n\t\t\t\t\t// Execute callback\n\t\t\t\t\tif (config && config.onUpdate) config.onUpdate(registration);\n\t\t\t\t}\n\t\t\t\telse \n\t\t\t\t{\n\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\tconsole.log(\"Content is cached for offline use.\");\n\n\t\t\t\t\t// Execute callback\n\t\t\t\t\tif (config && config.onSuccess) \n\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t}\n}\n};\n\t\t};\n\t\t})\n\t\t.catch(error => \n\t\t{\n\t\t\tconsole.error(\"Error during service worker registration:\", error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) \n{\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then(response => \n{\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) \n{\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => \n{\n          registration.unregister().then(() => \n{\n            window.location.reload();\n          });\n        });\n      }\n else \n{\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => \n{\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() \n{\n  if (\"serviceWorker\" in navigator) \n{\n    navigator.serviceWorker.ready\n      .then(registration => \n{\n        registration.unregister();\n      })\n      .catch(error => \n{\n        console.error(error.message);\n      });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}